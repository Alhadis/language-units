name: "Units (GNU)"
scopeName: "source.units.gnu"
fileTypes: ["units", "units.dat"]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#prefix"}
			{include: "#escape"}
			{include: "#directives"}
			{include: "#unit"}
		]


	# Comment
	comment:
		name:  "comment.line.number-sign.units.gnu"
		begin: "#"
		end:   "(?<!\\\\)$"
		beginCaptures:
			0: name: "punctuation.definition.comment.units.gnu"
		patterns: [include: "#escape"]


	# Special directives beginning with `!`
	directives:
		patterns: [{
			# !varnot [env-var] [value-list] … !endvar
			name:  "meta.block.$2.units.gnu"
			begin: "^\\s*(!)\\s*(varnot|var)(?=\\s|$|#)"
			end:   "^\\s*(!)\\s*(endvar)(?=\\s|$|#)"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			endCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			patterns: [
				{include: "#directiveEnvArgs"}
				{include: "#main"}
			]
		},{
			# !utf8 … !endutf8
			name:  "meta.block.utf8.units.gnu"
			begin: "^\\s*(!)\\s*(utf8)(?=\\s|$|#)(?:\\s*(#.*)?)$"
			end:   "^\\s*(!)\\s*(endutf8)(?=\\s|$|#)"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
				3: patterns: [include: "#comment"]
			endCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			patterns: [include: "#main"]
		},{
			# !locale [name] … !endlocale
			name:  "meta.block.$2.units.gnu"
			begin: "^\\s*(!)\\s*(locale)(?=\\s|$|#)"
			end:   "^\\s*(!)\\s*(endlocale)(?=\\s|$|#)"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			endCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			patterns: [{
				name: "constant.other.locale-name.units.gnu"
				match: "\\G\\s*([^\\s#]+)"
			}, include: "#main"]
		},{
			# !message [text]
			name:  "meta.block.$2.units.gnu"
			begin: "^\\s*(!)\\s*(message|prompt)(?=\\s|$)[ \\t]*"
			end:   "\\s*(?=(?<!\\\\)$|(?<=\\s)#)"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			contentName: "string.unquoted.$2-text.units.gnu"
			patterns: [include: "#escape"]
		},{
			# !set [env-var] [value]
			name:  "meta.block.$2.units.gnu"
			begin: "^\\s*(!)\\s*(set)(?=\\s|$|#)"
			end:   "(?<!\\\\)$"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			endCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			patterns: [
				{include: "#directiveEnvArgs"}
				{include: "#main"}
			]
		},{
			# !include [file]
			name:  "meta.block.$2.units.gnu"
			begin: "^\\s*(!)\\s*(include)(?=\\s|$)[ \\t]*"
			end:   "\\s*(?=(?<!\\\\)$|(?<=\\s)#)"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			contentName: "string.unquoted.filename.include.units.gnu"
			patterns: [include: "#escape"]
		},{
			# !unitlist [alias] [definition]
			name:  "meta.block.$2.units.gnu"
			begin: "^\\s*(!)\\s*(unitlist)(?=\\s|$)[ \\t]*"
			end:   "(?<!\\\\)$"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			patterns: [{
				name:  "entity.name.alias.units.gnu"
				match: "\\G\\s*((?![.,_#])([^-~;+*/|\\t\\n^ ()]+)(?<![.,_]))"
			},{
				name: "punctuation.delimiter.semicolon.units.gnu"
				match: ";"
			}, include: "#rhs"]
		},{
			# !unknown [args]
			name:  "meta.block.other.units.gnu"
			begin: "^\\s*(!)\\s*(?!\\d)(\\w+)(?=\\s|$)[ \\t]*"
			end:   "(?<!\\\\)$"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.other.units.gnu"
			patterns: [
				{include: "#directiveArg"}
				{include: "#comment"}
				{include: "#escape"}
			]
		}]
	
	
	# Argument to a `!directive`
	directiveArg:
		name: "constant.other.parameter.units.gnu"
		match: "(?:[^\\s#\\\\]|\\\\.)+"
	
	
	# Arguments to get/set an environment variable
	directiveEnvArgs:
		name: "meta.arguments.units.gnu"
		begin: "\\G"
		end:   "(?<!\\\\)$"
		patterns: [
			# Highlight first argument as a variable name
			name: "variable.other.global.environment.units.gnu"
			match: "(?:^|\\G)\\s*((?:[^\\s#\\\\]|\\\\.)+)"
			
			{include: "#escape"}
			{include: "#directiveArg"}
			{include: "#comment"}
		]
	
	
	# Line continuation
	escape:
		name:  "constant.character.escape.newline.units.gnu"
		begin: "(\\\\)$[\\n\\r]*"
		end:   "(?<=\\n|^)"
		beginCaptures:
			1: name: "punctuation.definition.escape.units.gnu"


	# Stuff like !this
	modifiers:
		patterns: [{
			# !dimensionless
			name: "storage.modifier.dimensionless.units.gnu"
			match: "(!)dimensionless(?=\\s|$)"
			captures:
				1: name: "punctuation.definition.modifier.units.gnu"
		},{
			# !a!
			name: "storage.modifier.primitive.labelled.units.gnu"
			match: "(!)([^\\s#]+)(!)(?=\\s|$)"
			captures:
				1: name: "punctuation.definition.modifier.begin.units.gnu"
				2: name: "string.quoted.exclamation-marks.units.gnu"
				3: name: "punctuation.definition.modifier.end.units.gnu"
		},{
			# !
			name: "storage.modifier.primitive.units.gnu"
			match: "!(?=\\s|$)"
			captures:
				0: name: "punctuation.definition.modifier.begin.units.gnu"
		}]
	
	
	# Float or integer
	number:
		name:  "constant.numeric.units.gnu"
		match: "[-+]?[.,0-9]+(?:[Ee][-+]?[.,0-9]+)?"

	
	# Mathematical operators
	operators:
		patterns: [
			{match: "/|\\|",      name: "keyword.operator.arithmetic.division.units.gnu"}
			{match: "\\^|\\*{2}", name: "keyword.operator.arithmetic.exponentiation.units.gnu"}
			{match: "\\*",        name: "keyword.operator.arithmetic.multiplication.units.gnu"}
			{match: "\\+",        name: "keyword.operator.arithmetic.addition.units.gnu"}
			
			# gunits(1) v2.02+ treats certain “Unicode dashes” as equivalent to ASCII hyphen-minus
			name: "keyword.operator.arithmetic.subtraction.minus.dash.hyphen.units.gnu"
			match: "-|\\u2012|\\u2013|\\u2212"
		]


	# Prefix definition
	prefix:
		name:  "meta.prefix.definition.units.gnu"
		begin: """(?x) ^\\s*
			# Valid unit name (source: `parse.y`)
			(?![.,_\\#])
			([^-~;+*/|\\t\\n^\\x20()]+)
			(?<![.,_])
			
			# Dash indicating a prefix
			( \\u2012  # Figure dash
			| \\u2013  # En dash
			| \\u2212  # Minus
			| -        # ASCII “hyphen-minus”
			)
			
			# Followed by whitespace
			(?=\\s|$)
		"""
		end: "(?<!\\\\)$"
		beginCaptures:
			1: name: "entity.name.prefix.units.gnu"
			2: name: "punctuation.definition.prefix.units.gnu"
		patterns: [include: "#rhs"]
	
	
	# Reference to another unit
	reference:
		name: "variable.other.constant.unit.reference.units.gnu"
		match: """(?x)
			(?![.,_\\#])
			(?:[^-~;+*/|\\t\\n^\\x20()\\#\\\\]|\\\\.)++
			(?<![.,_])
		"""
	
	
	# Actual definition following a unit or prefix name
	rhs:
		patterns: [
			{include: "#number"}
			{include: "#comment"}
			{include: "#modifiers"}
			{include: "#operators"}
			{include: "#reference"}
			{include: "#escape"}
		]


	# Unit definition
	unit:
		name:  "meta.unit.definition.units.gnu"
		begin: "^\\s*(?![.,_#])([^-~;+*/|\\t\\n^ ()]+)(?<![.,_])(?=\\s|$)"
		end:   "(?<!\\\\)$"
		beginCaptures:
			1: name: "entity.name.unit.units.gnu"
		patterns: [include: "#rhs"]
