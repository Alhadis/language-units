name: "Units (GNU)"
scopeName: "source.units.gnu"
fileTypes: ["units", "units.dat"]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#piecewise"}
			{include: "#prefix"}
			{include: "#escape"}
			{include: "#function"}
			{include: "#directives"}
			{include: "#unit"}
		]


	# Parentheses/round brackets
	brackets:
		begin: "\\("
		end:   "\\)"
		beginCaptures: 0: name: "punctuation.definition.round.bracket.begin.units.gnu"
		endCaptures:   0: name: "punctuation.definition.round.bracket.end.units.gnu"
		patterns: [include: "#rhs"]


	# Comment
	comment:
		name:  "comment.line.number-sign.units.gnu"
		begin: "#"
		end:   "(?<!\\\\)$"
		beginCaptures:
			0: name: "punctuation.definition.comment.units.gnu"
		patterns: [include: "#escape"]


	# Special directives beginning with `!`
	directives:
		patterns: [{
			# !varnot [env-var] [value-list] … !endvar
			name:  "meta.block.$2.units.gnu"
			begin: "^\\s*(!)\\s*(varnot|var)(?=\\s|$|#)"
			end:   "^\\s*(!)\\s*(endvar)(?=\\s|$|#)"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			endCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			patterns: [
				{include: "#directiveEnvArgs"}
				{include: "#main"}
			]
		},{
			# !utf8 … !endutf8
			name:  "meta.block.utf8.units.gnu"
			begin: "^\\s*(!)\\s*(utf8)(?=\\s|$|#)(?:\\s*(#.*)?)$"
			end:   "^\\s*(!)\\s*(endutf8)(?=\\s|$|#)"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
				3: patterns: [include: "#comment"]
			endCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			patterns: [include: "#main"]
		},{
			# !locale [name] … !endlocale
			name:  "meta.block.$2.units.gnu"
			begin: "^\\s*(!)\\s*(locale)(?=\\s|$|#)"
			end:   "^\\s*(!)\\s*(endlocale)(?=\\s|$|#)"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			endCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			patterns: [{
				name: "constant.other.locale-name.units.gnu"
				match: "\\G\\s*([^\\s#]+)"
			}, include: "#main"]
		},{
			# !message [text]
			name:  "meta.block.$2.units.gnu"
			begin: "^\\s*(!)\\s*(message|prompt)(?=\\s|$)[ \\t]*"
			end:   "\\s*(?=(?<!\\\\)$|(?<=\\s)#)"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			contentName: "string.unquoted.$2-text.units.gnu"
			patterns: [include: "#escape"]
		},{
			# !set [env-var] [value]
			name:  "meta.block.$2.units.gnu"
			begin: "^\\s*(!)\\s*(set)(?=\\s|$|#)"
			end:   "(?<!\\\\)$"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			endCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			patterns: [
				{include: "#directiveEnvArgs"}
				{include: "#main"}
			]
		},{
			# !include [file]
			name:  "meta.block.$2.units.gnu"
			begin: "^\\s*(!)\\s*(include)(?=\\s|$)[ \\t]*"
			end:   "\\s*(?=(?<!\\\\)$|(?<=\\s)#)"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			contentName: "string.unquoted.filename.include.units.gnu"
			patterns: [include: "#escape"]
		},{
			# !unitlist [alias] [definition]
			name:  "meta.block.$2.units.gnu"
			begin: "^\\s*(!)\\s*(unitlist)(?=\\s|$)[ \\t]*"
			end:   "(?<!\\\\)$"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.$2.units.gnu"
			patterns: [{
				name:  "entity.name.alias.units.gnu"
				match: "\\G\\s*((?![.,_#])([^-‒–−~;+*/|\\t\\n^ ()]+)(?<![.,_]))"
			},{
				name: "punctuation.delimiter.semicolon.units.gnu"
				match: ";"
			}, include: "#rhs"]
		},{
			# !unknown [args]
			name:  "meta.block.other.units.gnu"
			begin: "^\\s*(!)\\s*(?!\\d)(\\w+)(?=\\s|$)[ \\t]*"
			end:   "(?<!\\\\)$"
			beginCaptures:
				1: name: "punctuation.definition.directive.units.gnu"
				2: name: "keyword.control.directive.other.units.gnu"
			patterns: [
				{include: "#directiveArg"}
				{include: "#comment"}
				{include: "#escape"}
			]
		}]
	
	
	# Argument to a `!directive`
	directiveArg:
		name: "constant.other.parameter.units.gnu"
		match: "(?:[^\\s#\\\\]|\\\\.)+"
	
	
	# Arguments to get/set an environment variable
	directiveEnvArgs:
		name: "meta.arguments.units.gnu"
		begin: "\\G"
		end:   "(?<!\\\\)$"
		patterns: [
			# Highlight first argument as a variable name
			name: "variable.other.global.environment.units.gnu"
			match: "(?:^|\\G)\\s*((?:[^\\s#\\\\]|\\\\.)+)"
			
			{include: "#escape"}
			{include: "#directiveArg"}
			{include: "#comment"}
		]
	
	
	# Line continuation
	escape:
		name:  "constant.character.escape.newline.units.gnu"
		begin: "(\\\\)$[\\n\\r]*"
		end:   "(?<=\\n|^)"
		beginCaptures:
			1: name: "punctuation.definition.escape.units.gnu"


	# Non-linear units
	function:
		patterns: [{
			# Function alias
			name:  "meta.function.alias.units.gnu"
			begin: "^\\s*((?![.,_\\d])(?:[^-‒–−~;+*/|\\t\\n^ ()#\\\\]|\\\\.)++(?<![.,_]))(\\()(\\))(?=\\s|$)"
			end:   "(?<!\\\\)$"
			beginCaptures:
				1: name: "entity.name.function.alias.units.gnu"
				2: name: "punctuation.definition.round.bracket.begin.units.gnu"
				3: name: "punctuation.definition.round.bracket.end.units.gnu"
			patterns: [
				# Highlight first parameter only
				match: "\\G\\s*((?![.,_\\d])(?:[^-‒–−~;+*/|\\t\\n^ ()#\\\\]|\\\\.)++(?<![.,_]))"
				captures:
					1: name: "entity.name.function.units.gnu"
				
				{include: "#comment"}
				{include: "#escape"}
			]
		},{
			# Function definition
			name:  "meta.function.definition.units.gnu"
			begin: """(?x) ^\\s*
				# Function name
				((?![.,_\\d])(?:[^-‒–−~;+*/|\\t\\n^\\x20()\\#\\\\]|\\\\.)++(?<![.,_]))
				
				# Parameter name
				(
					(\\()
					((?![.,_\\d])(?:[^-‒–−~;+*/|\\t\\n^\\x20()\\#\\\\]|\\\\.)++(?<![.,_]))
					(\\))
				)
			"""
			end: "(?<!\\\\)$"
			beginCaptures:
				1: name: "entity.name.function.units.gnu"
				2: name: "meta.function.parameters.units.gnu"
				3: name: "punctuation.definition.round.bracket.begin.units.gnu"
				4: name: "variable.parameter.function.units.gnu"
				5: name: "punctuation.definition.round.bracket.end.units.gnu"
			patterns: [{
				
				# Optional keywords before a function definition:
				name:  "meta.function.optional-keywords.units.gnu"
				begin: "\\G"
				end:   "(?=[^\\s#])(?!\\bnoerror\\b|\\b(?:units|domain|range)=[\\[(]|\\\\$)"
				patterns: [{
					name: "storage.modifier.noerror.units.gnu"
					match: "\\bnoerror\\b"
				},{
					name:  "meta.$1-list.units.gnu"
					begin: "\\b(units|domain|range)(=)(?=\\[|\\()"
					end:   "(?<=\\]|\\))"
					beginCaptures:
						1: name: "storage.type.$1.units.gnu"
						2: name: "keyword.operator.assignment.units.gnu"
					patterns: [include: "#interval"]
				}, {include: "#comment"}, {include: "#escape"}]
			},{
				# Optional inversion definition
				name:  "meta.function.inverse.units.gnu"
				begin: ";"
				end:   "(?<!\\\\)$"
				beginCaptures:
					0: name: "punctuation.separator.semicolon.units.gnu"
				patterns: [include: "#rhs"]
			}, include: "#rhs"]
		}]

	
	# [x,y] (x,y)
	interval:
		name:  "meta.interval.units.gnu"
		begin: "\\[|\\("
		end:   "\\]|\\)"
		beginCaptures: 0: name: "punctuation.definition.interval.begin.units.gnu"
		endCaptures:   0: name: "punctuation.definition.interval.end.units.gnu"
		patterns: [
			{include: "#interval"}
			{include: "#rhsBracketed"}
		]


	# fn(var)
	functionCall:
		name:  "meta.function-call.units.gnu"
		begin: "((?![.,_\\d])(?:[^-‒–−~;+*/|\\t\\n^ ()#\\\\]|\\\\.)++(?<![.,_]))\\s*(\\()"
		end:   "\\)"
		beginCaptures:
			1: patterns: [{
				# Built-in functions
				name: "support.function.built-in.units.gnu"
				match: "^(?:acosh?|asinh?|atanh?|cosh?|cuberoot|exp|ln|log[0-9]*|sinh?|sqrt|tanh?)$"
			},{
				# User/library-defined function
				name: "entity.name.function.units.gnu"
				match: ".+"
			}]
			2: name: "punctuation.definition.arguments.begin.units.gnu"
		endCaptures:
			0: name: "punctuation.definition.arguments.end.units.gnu"
		contentName: "meta.arguments.units.gnu"
		patterns: [include: "#rhs"]


	# Stuff like !this
	modifiers:
		patterns: [{
			# !dimensionless
			name: "storage.modifier.dimensionless.units.gnu"
			match: "(!)dimensionless(?=\\s|$)"
			captures:
				1: name: "punctuation.definition.modifier.units.gnu"
		},{
			# !a!
			name: "storage.modifier.primitive.labelled.units.gnu"
			match: "(!)[^\\s#]+(!)(?=\\s|$)"
			captures:
				1: name: "punctuation.definition.modifier.begin.units.gnu"
				2: name: "punctuation.definition.modifier.end.units.gnu"
		},{
			# !
			name: "storage.modifier.primitive.units.gnu"
			match: "!(?=\\s|$)"
			captures:
				0: name: "punctuation.definition.modifier.begin.units.gnu"
		}]
	
	
	# Float or integer
	number:
		name:  "constant.numeric.units.gnu"
		match: "[-‒–−]?[.,0-9]+(?:[Ee][-‒–−+]?[.,0-9]+)?"

	
	# Mathematical operators
	operators:
		patterns: [
			{match: "/|\\|",      name: "keyword.operator.arithmetic.division.units.gnu"}
			{match: "\\bper\\b",  name: "keyword.operator.arithmetic.division.per.units.gnu"}
			{match: "\\^|\\*{2}", name: "keyword.operator.arithmetic.exponentiation.units.gnu"}
			{match: "\\*",        name: "keyword.operator.arithmetic.multiplication.units.gnu"}
			{match: "\\+",        name: "keyword.operator.arithmetic.addition.units.gnu"}
			{match: "~",          name: "keyword.operator.logical.inversion.invert.units.gnu"}
			{match: "[-‒–−]",     name: "keyword.operator.arithmetic.subtraction.minus.dash.hyphen.units.gnu"}
		]


	# Piecewise linear unit definition
	piecewise:
		name:  "meta.piecewise.unit.definition.units.gnu"
		begin: "^\\s*((?![.,_\\d])(?:[^-‒–−~;+*/|\\t\\n^ ()#\\[\\]\\\\]|\\\\.)++(?<![.,_]))(?=\\[)"
		end:   "(?<!\\\\)$"
		beginCaptures:
			1: name: "entity.name.function.units.gnu"
		patterns: [
			name:  "meta.output-unit.units.gnu"
			begin: "\\G\\["
			end:   "\\]"
			beginCaptures: 0: name: "punctuation.definition.square.bracket.begin.units.gnu"
			endCaptures:   0: name: "punctuation.definition.square.bracket.end.units.gnu"
			patterns: [include: "#rhsBracketed"]
			
			{match: "\\bnoerror\\b", name: "storage.modifier.noerror.units.gnu"}
			{include: "#number"}
			{include: "#comment"}
			{include: "#escape"}
		]


	# Prefix definition
	prefix:
		name:  "meta.prefix.definition.units.gnu"
		begin: """(?x) ^\\s*
			# Leading `+` indicates a deliberate redefinition
			(\\+)?
			
			# Valid unit name (source: `parse.y`)
			(?![.,_\\#])
			([^-‒–−~;+*/|\\t\\n^\\x20()]+)
			(?<![.,_])
			
			([-‒–−])
			
			(?=\\s|$)
		"""
		end: "(?<!\\\\)$"
		beginCaptures:
			1: name: "keyword.operator.redefinition.units.gnu"
			2: name: "entity.name.prefix.units.gnu"
			3: name: "punctuation.definition.prefix.units.gnu"
		patterns: [include: "#rhs"]
	
	
	# Reference to another unit
	reference:
		name: "variable.other.constant.unit.reference.units.gnu"
		match: """(?x)
			(?![.,_\\#])
			(?:[^-‒–−~;+*/|\\t\\n^\\x20()\\#\\\\]|\\\\.)++
			(?<![.,_])
		"""
	
	
	# Actual definition following a unit or prefix name
	rhs:
		patterns: [
			{include: "#number"}
			{include: "#comment"}
			{include: "#functionCall"}
			{include: "#modifiers"}
			{include: "#operators"}
			{include: "#reference"}
			{include: "#escape"}
			{include: "#brackets"}
		]


	# Variant of the above that avoids swallowing commas or square-brackets
	rhsBracketed:
		patterns: [
			{match: ";", name: "punctuation.delimiter.semicolon.units.gnu"}
			{match: ",", name: "punctuation.delimiter.comma.units.gnu"}
			{include: "#comment"}
			{include: "#operators"}
			{include: "#escape"}
			{
				name:  "constant.numeric.units.gnu"
				match: "[-‒–−]?[.0-9]+(?:[Ee][-‒–−+]?[.0-9]+)?"
			}
			{
				name: "variable.other.constant.unit.reference.units.gnu"
				match: "(?![.,_])(?:[^-‒–−~;+*/|\\t\\n^\\x20()\\[\\]#\\\\]|\\\\.)++(?<![.,_])"
			}
		]


	# Unit definition
	unit:
		name:  "meta.unit.definition.units.gnu"
		begin: "^\\s*(\\+)?(?![.,_#])([^-‒–−~;+*/|\\t\\n^ ()]+)(?<![.,_])(?=\\s|$)"
		end:   "(?<!\\\\)$"
		beginCaptures:
			1: name: "keyword.operator.redefinition.units.gnu"
			2: name: "entity.name.unit.units.gnu"
		patterns: [include: "#rhs"]
